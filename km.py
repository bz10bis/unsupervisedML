# -*- coding: utf-8 -*-
"""KM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GCavI00lJldZS3B0K653m9QECE55_RGK

# Debug
"""

#!cat /proc/meminfo

"""# KMeans MNIST

## Import lib
"""

from keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt
import time


"""## Chargement des données"""

(data, label),(_,_) = mnist.load_data()
data = data.reshape(60000, 784)

"""## Déclaration des parametres"""

#@title Parametres
epochs = 10 #@param {type:"integer"}
clusters = 10 #@param {type:"slider", min:0, max:20, step:1}
nombre_exemples = 50 #@param {type:"integer"}

"""## Définition de la fonction Kmeans"""

def kmean(data, k, epochs, labels):
  start_time = time.time()
  print("#" * 20 + " KMEANS " + "#" * 20)
  print("data shape\tnb clusters\tnbepochs")
  print("-" * 50)
  print("{}\t{}\t\t{}".format(data.shape, k, epochs))
  print("-" * 50)
  n = data.shape[0]
  nf = data.shape[1]
  rows = np.arange(n)
  c_idx = np.random.choice(n, k)
  centroids = data[c_idx].T
  print(centroids.shape)
  repeated_data = np.stack([data] * k, axis=-1)
  for i in range(epochs):
    local_time = time.time()
    distances = np.sqrt(np.sum(np.square(repeated_data - centroids), axis=1))
    assignments = np.argmin(distances, axis=-1)
    counts = np.bincount(assignments)
    concat_matx = np.zeros([n, k, nf])
    concat_matx[rows, assignments] = data
    centroids = concat_matx.sum(axis=0).T / counts.clip(min=1).T
    print("iteration: {} {} -- t:{} s".format(i, counts, round(time.time()-local_time,2)))
  print("-"*50)  
  print("FINAL {}".format(counts))
  print("Elapse time: {} s".format(round(time.time() - start_time, 2)))
  hist = []
  for c in range(k):
    hist.append([])
  for i in range(len(labels)):
    hist[labels[i]].append(assignments[i])
  plt.hist(hist)
  plt.show()
kmean(data, clusters, epochs, label)



